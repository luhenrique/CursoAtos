--CREATE DATABASE
    CREATE DATABASE NOMEDODATABASE;

--USE
    USE NOMEDODATABASE;

--CREATE TABLE 
    CREATE TABLE NOMETABELA(
        CAMPO1 INT,
        CAMPO2 VARCHAR,
        CAMPO3 DATE
    );

--ALTE TABLE
    ALTER TABLE NOMETABELA ADD NOMEDCOLUNA TIPOCOLUNA;    

--INSERT
    INSERT INTO NOMETABELA (COLUNA1, COLUNA2) VALUES  (VALORDOCAMPO1, VALORDOCAMPO2 ) 

-- SELECT
/*Seleciona conteudo das colunas nas tabelas*/
    (* == TUDO)

    SELECT * FROM NOMETABELA;
    SELECT COLUNA1, COLUNA2, COLUNA3  FROM NOMETABELA;


-- DISTINCT
/*Seleciona conteudo das tabelas excluindo itens duplicados*/
    SELECT DISTINCT * FROM NOMETABELA;
    SELECT DISTINCT COLUNA1, COLUNA2 FROM NOMETABELA;

    INSERT INTO NOMETABELA (COLUNA1, COLUNA2) VALUES  (VALORDOCAMPO1, VALORDOCAMPO2 ) 

-- WHERE
/*Aplica condiçoes de pesquisa (seleciona alguma coisa ONDE condição)*/
    SELECT * FROM NOMETABELA WHERE CONDIÇÃO;
    SELECT * FROM NOMETABELA WHERE EMAIL = 'TESTE@TESTE.COM'
    SELECT COLUNA1 FROM NOMETABELA WHERE NOME = '' AND PRIVILEGIO = '';
    SELECT * FROM NOMETABELA WHERE preco > 100 and preco < 300;
    SELECT COLUNA1 FROM NOMETABELA WHERE NOME = '' OR PRIVILEGIO = '';

    /*
    OPERADORES
        =   IGUAL
        >   MAIOR QUE
        <   MENOR QUE
        >=  MAIOR IGUAL QUE
        <=  MENOR IGUAL QUE
        <>  DIFERENTE
    CONECTIVOS
        AND OPERADOR E
        OR  OPERADOR OU
        NOT NEGAÇÃO
    */

-- COUNT
/*Conta o numero de ocorrencias*/
    SELECT COUNT(COLUNA1) FROM NOMETABELA;
    SELECT COUNT(DISTINCT COLUNA1) FROM NOMETABELA;

-- ORDER BY
/*Ordena os itens dos campos*/

    SELECT * FROM NOMETABELA ORDER BY COLUNA1 ASC/DESC;
    SELECT * FROM NOMETABELA ORDER BY COLUNA1 ASC;

-- BETWEEN
/*Seleciona itens entre 2 valores*/
    SELECT * FROM NOMETABELA WHERE COLUNA1 BETWEEN VALOR1 AND VALOR2;
    SELECT * FROM NOMETABELA WHERE COLUNA1 BETWEEN VALOR1 AND VALOR2 ORDER BY COLUNA1 ASC;
    SELECT Nome FROM MEDICOS WHERE DataNasc BETWEEN '1985-01-01' and '1997-06-29';
    SELECT * FROM NOMETABELA WHERE COLUNA1 NOT BETWEEN VALOR1 AND VALOR2;

--  IN
/*Seleciona campos que contem um valor ou valores*/
    SELECT * FROM NOMETABELA WHERE COLUNA1 IN (VALOR1, VALOR2, VALOR3);
    SELECT * FROM NOMETABELA WHERE COLUNA1 NOT IN (VALOR1, VALOR2, VALOR3);
    SELECT * FROM NOMETABELA WHERE COLUNA1 IN (SELECT COLUNA1 FROM NOMETABELA WHERE dado = 'dado');

    /*REPRODUZIR O RESUTADO DA STRING IN USANDO APENAS WHERE E CONECTIVOS*/

    /*DECOMPONDO A STRING*/
    SELECT * FROM USUARIOS WHERE IdPrivilegio IN(SELECT id FROM PRIVILEGIO WHERE nome = 'MASTER');
    SELECT * FROM USUARIOS WHERE IdPrivilegio IN(1);


-- MIN
    /*RETORNA O MENOR VALOR DA COLUNA*/
    SELECT MIN(COLUNA1) FROM NOMETABELA

-- MAX
    /*Retorna o maior valor da coluna*/
    SELECT MAX(COLUNA1) FROM NOMETABELA

-- SUM
    /*Retorna o valor da soma de todas os valores da coluna*/
    SELECT SUM(COLUNA1) FROM NOMETABELA

-- LIKE
    /*Retorna um dado a partir de uma parte do nome */

    SELECT * FROM NOMETABELA WHERE COLUNA1 LIKE 'P%';
    SELECT * FROM NOMETABELA WHERE COLUNA1 LIKE '%P';
    SELECT * FROM NOMETABELA WHERE COLUNA1 LIKE '%P%';
    SELECT * FROM NOMETABELA WHERE COLUNA1 LIKE 'P_A';
    SELECT * FROM NOMETABELA WHERE COLUNA1 LIKE '_PA';

    /*ESCREVE UMA QUERY QUE CONTE QUANTO MEDICOS QUE COMEÇAM COM UMA LETRA (X) E QUE TENHAM UMA ESPECIALIDADE (Y)*/
    SELECT COUNT(Nome) FROM MEDICOS WHERE Nome LIKE 'A%' AND (SELECT id FROM ESPECIALIDADES WHERE nome = 'podologo');

-- GROUP BY
    /*Cria grupos baseado em semelhanças nas linhas a partir de uma função de agregação*/
    SELECT COLUNA1, COUNT(COLUNA2) FROM NOMETABELA GROUP BY COLUNA2
    SELECT CIDADE, COUNT(MEDICOS) FROM MEDICOS GROUP BY CIDADE;

-- HAVING
    /*APLICA CONDIÇÕES PARA O GROUP BY HAVING == WHERE */
    SELECT COLUNA1, COUNT(COLUNA2) FROM NOMETABELA GROUP BY COLUNA1 HAVING COUNT(COLUNA2) > 3;
    SELECT IdCidade, COUNT(Nome) FROM MEDICOS GROUP BY IdCidade HAVING COUNT(Nome) < 3;

-- AS
    /*DEFINE UM APELIDO PARA AS COLUNAS*/
    SELECT SUM(COLUNA1) AS 'APELIDO' FROM NOMETABELA;
    SELECT SUM(IdPrivilegio) AS 'SOMA' FROM USUARIOS;

-- INNER JOIN
    /*INNER JOIN RETONA APENAS OS RESULTADOS QUE CORRESPONDEM  EM DUAS TABELAS ( A E B) -> INTERSECÇÃO DE A E B*/
    SELECT A.COLUNA1, B.COLUNA1 FROM NOMETABELA AS A INNER JOIN NOMETABELA2 B ON COLUNA2 = COLUNA2;
    SELECT m.nome, e.nome FROM MEDICOS as m INNER JOIN ESPECIALIDADE e ON IdEspecialidade = Id;



      SELECT T1.nome, T2.nome FROM NOMETABELA as T1 INNER JOIN TABELA2 T2 ON TIPO = ID;

    /*ESCREVA UMA QUERY QUE BUSQUE TODOS OS MEDICOS DE UMA CIDADE X E SUAS RESPECTIVAS ESPECIALIDADES*/
    SELECT a.Nome, b.Nome, c.Nome FROM MEDICOS AS a INNER JOIN CIDADES AS b ON a.IdCidade = b.Id 
    INNER JOIN ESPECIALIDADE AS c ON a.IdEspecialidade = c.Id WHERE b.Nome = 'APUCARANA'; 


TIPO (FK ID TABELA 2)

    TABELA 1                    TABELA 2

    NOME     TIPO               ID  NOME
    ABACATE   1                 1   FRUTA
    CENOURA   2                 2   LEGUME 
    ALFACE    3                 3   VERDURA
    MORANGO   1                 4   RAIZ
    
   ABACATE -> FRUTA
   MORANGO -> FRUTA 
   CENOURA -> LEGUME
   ALFACE -> VERDURA

-- LEFT OUTER JOIN
    /*LEFT OUTER JOIN RETONA UM CONJUNTO DE TODOS OS REGISTROS DA TABELA A(ESQUERDA), E OS REGISTROS CORRESPONDENDES 
    DA TABELA B (DIREITA) QUANDO DISPONIVEIS. SE NÃO HOUVER DADO CORRESPONDENTE É PREENCHIDO COM NULL*/
    
    SELECT * FROM NOMETABELA1  AS A LEFT OUTER JOIN  NOMETABELA2 B ON A.NOME = B.NOME;
    SELECT a.nome AS 'MEDICOS', b.nome AS 'USUARIOS' FROM MEDICOS AS a LEFT JOIN USUARIOS b ON a.nome = b.nome;
    SELECT a.nome AS 'MEDICOS', b.nome AS 'USUARIOS' FROM MEDICOS AS a LEFT JOIN USUARIOS b ON a.nome = b.nome WHERE b.nome IS NULL;
    SELECT a.nome AS 'MEDICOS', b.nome AS 'USUARIOS' FROM MEDICOS AS a LEFT JOIN USUARIOS b ON a.nome = b.nome WHERE b.nome IS NOT NULL;



    TABELA 1                TABELA 2

    NOME_MED                NOME_USER
    LUIZ                    LUIZ
    JORGE                   JOAO    
    CLEYTIN                 CLEYTIN
    SONIA                   CLAUDIO    
    CARLOS                  JOANA

    LEFT JOIN

    LUIZ -> LUIZ
    CLEYTIN -> CLEYTIN
    JORGE -> NULL
    SONIA -> NULL
    CARLOS -> NULL

-- RIGHT JOIN 
    /*RIGHT OUTER JOIN RETONA UM CONJUNTO DE TODOS OS REGISTROS DA TABELA B(DIREITA), E OS REGISTROS CORRESPONDENDES 
    DA TABELA A (ESQUERDA) QUANDO DISPONIVEIS. SE NÃO HOUVER DADO CORRESPONDENTE É PREENCHIDO COM NULL*/

    SELECT * FROM NOMETABELA1 RIGHT JOIN NOMETABELA2 ON NOME = NOME;
    SELECT a.nome AS 'MEDICOS', b.nome AS 'USUARIOS' FROM MEDICOS AS a RIGHT JOIN USUARIOS b ON a.nome = b.nome;
    SELECT a.nome AS 'MEDICOS', b.nome AS 'USUARIOS' FROM MEDICOS AS a RIGHT JOIN USUARIOS b ON a.nome = b.nome WHERE b.nome IS NULL;
    SELECT a.nome AS 'MEDICOS', b.nome AS 'USUARIOS' FROM MEDICOS AS a RIGHT JOIN USUARIOS b ON a.nome = b.nome WHERE b.nome IS NOT NULL;


    TABELA 1                TABELA 2

    NOME_MED                NOME_USER
    LUIZ                    LUIZ
    JORGE                   JOAO    
    CLEYTIN                 CLEYTIN
    SONIA                   CLAUDIO    
    CARLOS                  JOANA

    RIGHT JOIN

    LUIZ -> LUIZ
    CLEYTIN -> CLEYTIN
    CLAUDIO -> NULL
    JOANA -> NULL
    JOAO -> NULL

-- CROSS JOIN 
    /*REALIZA O PRODUTO CARTESIANO DE TODOS OS DADOS DAS TABELAS*/
    SELECT * FROM NOMETABELA1 CROSS JOIN NOMETABELA2;

    TABELA 1                TABELA 2

    NOME_MED                NOME_USER
    LUIZ                    LUIZ
    JORGE                   JOAO 

    CROSS JOIN

    LUIZ -> LUIZ
    LUIZ -> JOAO
    JORGE -> LUIZ
    JORGE -> JOÃO


-- UNION
    /*COMBINA DOIS OU MAIS RESULTADOS DE SELECT EM UMA SÓ SAIDA*/

    SELECT COLUNA1, COLUNA2 FROM NOMETABELA UNION SELECT COLUNA1, COLUNA2 FROM NOMETABELA2
    SELECT nome FROM MEDICOS UNION SELECT nome FROM USUARIOS;
    SELECT nome FROM MEDICOS  UNION ALL  SELECT nome FROM USUARIOS;
    


-- OPERAÇÕES MATEMATICAS

+
-
/
*   
SELECT COLUNA1 + COLUNA2 FROM NOMETABELA;
-- AVG 
    /*Tira a media dos valores das colunas*/
    SELECT AVG(COLUNA1) FROM NOMEDODATABASE;
-- ROUND
    /*Aredonda os valores*/
    SELECT ROUND(COLUNA1) FROM NOMETABELA;
    SELECT ROUND(COLUNA1, 2) FROM NOMETABELA;  

-- SQRT 
    /*TIRA A RAIZ QUADRADA*/
    SELECT SQRT(COLUNA1) FROM NOMETABELA;


/*ESCREVA UMA QUERY QUE RETORNO O NOME E A IDADE DOS MEDICOS*/

    SELECT nome AS NOME, ( YEAR(CURDATE()) - YEAR(DataNasc)) AS IDADE FROM MEDICOS; 



-- MANIPULAÇÃO DE DATAS
    /*RETONA O ANO*/
    SELECT YEAR(COLUNA1) FROM NOMETABELA1
    SELECT YEAR('2021-01-26')
    /*RETONA O MES*/
    SELECT MONTH(COLUNA1) FROM NOMETABELA1
    SELECT MONTH('2021-01-26')
    /*RETONA O DIA*/
    SELECT DAY(COLUNA1) FROM NOMETABELA1
    SELECT DAY('2021-01-26')
    /*RETORNA A DATA CORRENTE*/
    SELECT CURDATE();

-- MINUPULAÇÃO DE STRINGS 

    UPPER
    /*MUDA TODOS OS CARACTERES PARA MAIUSCULO*/
    SELECT UPPER(COLUNA1) FROM NOMETABELA;
    SELECT UPPER(nome) FROM  MEDICOS;

    LOWER
    /*MUDA TODOS OS CARACTERS PARA MINUSCULO*/
    SELECT LOWER(COLUNA1) FROM NOMETABELA;
    SELECT LOWER(nome) FROM  MEDICOS;

    SUBSTRING
    /*RETORNA UMA PARTE DA STRING*/
    SELECT SUBSTRING(COLUNA1, 1,2) FROM NOMETABELA;

    LENGTH
    /*RETONA O NUMERO DE CARACTERES DE UMA STRING*/
    SELECT LENGTH(COLUNA1) FROM NOMETABELA

    REPLACE
    /*SUBSTUI UM CARACTER POR OUTRO*/
    SELECT REPLACE(nome, 'X', 'Y') NOMETABELA
    SELECT REPLACE('LUIZ', L, J)

    CONCAT
    /*CONCATENA 2 OU MAIS STRINGS*/
    SELECT CONCAT(COLUNA1, COLUNA2) FROM NOMETABELA;
    SELECT CONCAT(nome, ' ', DataNasc) FROM MEDICOS;


    /*ESCREVA UMA QUERY QUE RETORNE A SEGUINTE STRING:
        O MEDICO 'X' É ESPECIALISTA EM 'Y'*/

        SELECT CONCAT(m.nome, ' é especialista em ', e.nome) FROM MEDICOS AS m INNER JOIN ESPECIALIDADE AS e ON IdEspecialidade = Id;
